@@@@@/home/5n4k3/src/xploit.src
///////////////////////////////////////////////////////////////////
// xploit.src - Multipurpose hacking and scanning tool.
// Entire source written by Philip "5n4k3" Simonson
///////////////////////////////////////////////////////////////////

// Include my helper code
import_code("/home/5n4k3/src/helper.src")

// Function for creating an option interface
get_option = function(options = null, menu_name = "")
	if not options then return print_error("Please provide an option list.")
	if typeof(options) != "list" then return print_error("Option list argument, not a list.")
	
	option = null
	while not option or option <= 0 or option > options.len
		for i in range(1, options.len)
			print("[<color=#00AA00><b>" + str(i) + "</b></color>] - " + options[i - 1])
		end for
		print("[<color=#00AA00><b>0</b></color>] - Exit")
		option = user_input("Enter selection [<color=#AA0000><b>" + menu_name + "</b></color>]: ")
		option = option.to_int
		if option == 0 then break
	end while
	return option
end function

// Function for built-in xmap
use_xmap = function(address)
	islanip = is_lan_ip(address)

	print_ports = function(ports)
		if typeof(ports) == "string" then return print(ports)
		if ports.len == 0 then return print("Scan finished. No open ports.\n")
	
		info = "PORT STATE SERVICE VERSION LAN"
		for port in ports
			service_info = router.port_info(port)
			lan_ip = port.get_lan_ip
			port_status = "open"
			if port.is_closed then
				port_status = "closed"
			end if
			info = info + "\n" + port.port_number + " " + port_status + " " + service_info + " " + lan_ip
		end for
		print(format_columns(info) + "\n")
	end function

	if islanip then
	   router = get_router
	else 
	   router = get_router(address)
	end if

	if router == null then return print("Error: IP address not found.")
	print("\nStarting xmap v1.0 at " + current_date)
	print("Interesting ports on " + address + "\n")

	print_ports(router.used_ports)
	ports = []
	for lan in router.devices_lan_ip
	   ports = ports + router.device_ports(lan)
	end for
	print_ports(ports)
end function

// Get bank or mail from server
use_getfile = function(address, port, user_file)
	GetFile = function(result, userFile)
		if typeof(result) == "file" then
			while not result.path == "/"
				result = result.parent
			end while
		
			// Get user home directory
			folders = result.get_folders
			for folder in folders
				if folder.name == "home" then
					homeFolder = folder
					break
				end if
			end for
			if not homeFolder then return print("Error: Can't access home dir.")
		else if typeof(result) == "computer" then
			homeFolder = result.File("/home")
			if not homeFolder then return print("Error: Can't access home dir.")
		end if

		search_home(homeFolder, user_file)
		return
	end function
	
	// Initialize metaxploit
	mx = get_library("metaxploit.so", true)
	if not mx then return
	lib = use_exploit(mx, address, port)
	if not lib then return
	
	// Get all exploits available.
	print("Launching all available exploits for target...")
	exploits = get_exploits(lib, address, port, true)
	if not exploits then return print_error("No exploits found!")

	// Scan all available exploits against target
	for exploit in exploits
		address = exploit["address"]
		for value in exploit["values"]
			result = lib.overflow(address, value["value"])
			if not result then continue

			// Check for shell or computer
			if typeof(result) == "shell" then
				remotepc = result.host_computer
				GetFile(remotepc.File("/"), user_file)
				return
			else if typeof(result) == "computer" then
				// Get user file
				GetFile(result, user_file)
				return
			else if typeof(result) == "file" then
				// Get user file.
				while result.path != "/"
					result = result.parent
				end while
				
				for folder in result.get_folders
					if folder.name == "home" then
						GetFile(folder, user_file)
						return
					end if
				end for
			end if
		end for
	end for
end function

// Function to replicate to remote machine
replicate = function(remote_shell)
	if not remote_shell then return null
	if remote_shell and typeof(remote_shell) != "shell" then return null
	
	input = null
	while not input or input == ""
		input = user_input("Do you want to copy the exploit system (y/n)? ")
	end while
	
	if input == "y" or input == "Y" then
		// Upload files
		file = remote_shell.host_computer.File("/home/guest/metaxploit.so")
		if not file then get_shell.scp(parent_path(program_path) + "/metaxploit.so", "/home/guest", remote_shell)
		file = remote_shell.host_computer.File("/home/guest/crypto.so")
		if not file then get_shell.scp(parent_path(program_path) + "/crypto.so", "/home/guest", remote_shell)
		file = remote_shell.host_computer.File("/home/guest/xploit")
		if not file then get_shell.scp(program_path, "/home/guest", remote_shell)

		// Change files ownership
		filenames = ["metaxploit.so", "crypto.so", "xploit"]
		for filename in filenames
			file = remote_shell.host_computer.File("/home/guest/" + filename)
			if not file then continue
			file.set_owner("guest", 0)
			file.set_group("guest", 0)
		end for
		
		input = null
		while not input or input == ""
			input = user_input("Do you want to launch a shell with the exploit (y/n)? ")
		end while
		
		if input == "y" or input == "y" then
			remote_shell.launch("/home/guest/xploit", "")
			remote_shell.start_terminal
		end if
	else
		input = null
		while not input or input == ""
			input = user_input("Do you want to launch a shell (y/n)? ")
		end while
	
		if input == "y" or input == "Y" then
			remote_shell.start_terminal
		end if
	end if
	return remote_shell
end function

// Function to clean itself from the host
use_clean = function()
	guest_folder = get_shell.host_computer.File("/home/guest")
	if not guest_folder then return print_error("Guest folder not found.")
	for file in guest_folder.get_files
		if file.name == "metaxploit.so" or file.name == "crypto.so" or file.name == "xploit" then
			print("Removing file: " + file.path)
			file.delete
		end if
	end for
	
	print("System was cleaned.")
	return
end function

// Function built-in local exploiter
use_scan = function(address = null, port = null, local = false)
	// Get exploit library
	mx = get_library("metaxploit.so", true)
	if not mx then return null
	
	lib = null
	exploits = null
	if not local then
		if port != null then
			lib = use_exploit(mx, address, port)
			if not lib then return null
			exploits = get_exploits(lib, address, port, true)
		else
			lib = use_exploit(mx, address)
			if not lib then return null
			exploits = get_exploits(lib, address, null, true)
		end if
	else
		lib = use_exploit(mx, address, null, true)
		if not lib then return null
		exploits = get_exploits(lib, null, null, true)
	end if
	if not exploits then return null
	if exploits.len == 0 then return null
	return [lib, exploits]
end function

// Function built-in exploiter
do_exploit = function(lib = null, exploits = null)
	// Function to get the password file at /etc
	get_passwd = function(result)
		if typeof(result) == "computer" then
			file = result.File("/etc/passwd")
			if not file then return false
			if file.is_binary then return false
			if not file.has_permission("r") then
				print(file.path + ": Permission denied.")
				return false
			end if
			print(file.path + ":")
			print(file.get_content)
			return true
		else if typeof(result) == "file" then
			while result.path != "/"
				result = result.parent
			end while
			
			// Get all folders in root directory
			folders = result.get_folders
			for folder in folders
				if folder.name == "etc" then
					result = folder
					break
				end if
			end for
			if not result then return false
			if not result.is_binary then return false
			
			// Get all files in /etc
			files = result.get_files
			for file in files
				if file.name == "passwd" then
					result = file
					break
				end if
			end for
			if not result then return false
			if result.is_binary then return false
			if not result.has_permission("r") then
				print(result.path + ": Permission denied.")
				return false
			end if
			print(file.path + ":\n" + file.get_content + "\n")
			return true
		end if
	end function

	// Function to do something with the result.
	do_result = function(shell, computer, userfile)
		// Get password file
		result = computer
		if not result then result = userfile
		if result then get_passwd(result)
				
		// Start new shell
		if shell then
			shell = replicate(shell)
		end if
		
		return shell
	end function
	
	if not lib or not exploits then
		print("Please run remote scanner first.")
		return null
	end if

	// Globals
	shell = null
	computer = null
	userfile = null
	
	// Scan for memory addresses
	for exploit in exploits
		address = exploit["address"]
		for value in exploit["values"]
			if shell and computer or userfile then do_result(shell, computer, userfile)

			if not shell and value["type"] == "shell" then
				shell = value["result"]
				if shell and computer or userfile then do_result(shell, computer, userfile)
			else if not computer and value["type"] == "computer" then
				computer = value["result"]
			else if not userfile and value["type"] == "file" then
				userfile = value["result"]
			end if
		end for
	end for

	return shell
end function

start_message = "******************************************************\n" + "*      ___    ___                                    *\n" + "*       \ \  / /   ______  ___          _  ___       *\n" + "*        \ \/ /   /  ___ \ | |    ___  |_| | |_      *\n" + "*        / /\ \   | |___|| | |_  | | |  _  |  _|     *\n" + "*       / /  \ \  | _____/ |___| | | | | | | |       *\n" + "*      ---------- | |             ---   -   -        *\n" + "*                  -                                 *\n" + "******************************************************\n"

// Actual program below
if params.len != 0 then exit("<b>Usage: " + get_name() + "</b>")

main_menu = ["Port Scanner", "Remote Hack", "Local Hack", "System"]
address = null
port = null
option = null
shell = null

print(start_message)
while true
	option = get_option(main_menu, "MAIN")

	if option == 0 then
		exit("Program ended")
	else if option == 1 then
		address = null
	
		while not address or not is_valid_ip(address)
			address = user_input("Enter IP address: ")
		end while
		
		use_xmap(address)
	else if option == 2 then
		remote_menu = ["Remote Scan", "Exploit System", "Launch Shell", "Get Mail", "Get Bank"]
		
		remote_lib = null
		remote_address = null
		remote_port = null
		remote_exploits = null
		done = false
		while not done
		
			option = get_option(remote_menu, "REMOTE")
			if option == 0 then
				done = true
			else if option == 1 then
				// Scan for exploits
				address = null
				port = null
				while not address or not is_valid_ip(address)
					address = user_input("Enter IP Address: ")
				end while
			
				input = user_input("Do you want to enter a port (y/n)? ")
				if input == "y" or input == "Y" then
					while not port or port < 0 or port > 65535
						port = user_input("Enter Port: ")
						port = port.to_int
					end while
				end if
				if not port then
					print("Running scanner on router...")
					stuff = use_scan(address, null)
					if not stuff then continue
					remote_exploits = stuff[1]
					remote_address = address
					remote_port = port
					remote_lib = stuff[0]
				else
					print("Running scanner at " + address + " on port " + str(port))
					stuff = use_scan(address, port)
					if not stuff then continue
					remote_exploits = stuff[1]
					remote_address = address
					remote_port = port
					remote_lib = stuff[0]
				end if
			else if option == 2 then
				// Remote exploit
				if not remote_address or not remote_port or not remote_exploits then
					print("Please run remote scanner first.")
					continue
				end if
				
				if not port then
					print("Running exploits on router...")
					shell = do_exploit(remote_lib, remote_exploits)
				else
					print("Running exploits at " + remote_address + " on port " + str(remote_port))
					shell = do_exploit(remote_lib, remote_exploits)
				end if
			else if option == 3 then
				// Launch shell
				if shell and typeof(shell) == "shell" then
					shell.launch("/home/guest/xploit", "")
					shell.start_terminal
				else
					print("You haven't obtained a shell yet, please run exploit first.")
				end if
			else if option == 4 then
				// Get mail files
				address = null
				port = null
		
				// Get address from user
				while not address or not is_valid_ip(address)
					address = user_input("Enter IP address: ")
				end while
			
				// Get port from user
				while not port or port < 0 or port > 65535
					port = user_input("Enter port number: ")
					port = port.to_int
				end while
			
				use_getfile(address, port, "Mail.txt")
			else if option == 5 then
				// Get bank files
				address = null
				port = null
			
				// Get address from user
				while not address or not is_valid_ip(address)
					address = user_input("Enter IP address: ")
				end while
			
				// Get port from user
				while not port or port < 0 or port > 65535
					port = user_input("Enter port number: ")
					port = port.to_int
				end while
			
				use_getfile(address, port, "Bank.txt")
			else
				print("Invalid option")
			end if
		end while
	else if option == 3 then
		local_menu = ["Scan for Exploits", "Exploit Local Machine"]
		
		local_exploits = null
		local_lib = null
		done = false
		while not done
			option = get_option(local_menu, "LOCAL")
			if option == 0 then
				done = true
			else if option == 1 then
				// Do scan local target
				lib_menu = []
				lib_path = []
				files = get_shell.host_computer.File("/lib").get_files
				if not files then continue
				for file in files
					lib_menu.push(file.name)
					lib_path.push(file.path)
				end for
				if lib_menu.len == 0 then continue
				if lib_menu.len != lib_path.len then continue
				
				isdone = false
				while not isdone
					option = get_option(lib_menu, "LOCAL SCAN")
					if option == 0 then
						isdone = true
					else if option >= 1 and option <= lib_menu.len then
						stuff = use_scan(lib_path[option - 1], null, true)
						if not stuff then continue
						local_exploits = stuff[1]
						local_lib = stuff[0]
					else
						print("Option not available.")
					end if
				end while
			else if option == 2 then
				if not local_exploits then
					print("Please run a scan first.")
					continue
				end if
				shell = do_exploit(local_lib, local_exploits)
			else
				print("Option not available.")
			end if
		end while
	else if option == 4 then
		system_menu = ["Clean Xploit"]
		
		done = false
		while not done
			option = get_option(system_menu, "SYSTEM")
			if option == 0 then
				done = true
			else if option == 1 then
				use_clean()
			else
				print("Option not available.")
			end if
		end while
	else
		print("Option not available.")
	end	 if
end while

@@@@@@@@@@
@@@@@/home/5n4k3/src/decrypt.src
//command: decrypt
import_code("/home/5n4k3/src/helper.src")
crypto = get_library("crypto.so", true)
if not crypto then exit

GetPassword = function(userPass)
	if userPass.len != 2 then exit(get_name() + ": wrong syntax")
	password = crypto.decipher(userPass[1])
	return password
end function

if params.len != 1 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: " + get_name() + " [hash|file]</b>")

origFile = params[0]
file = get_shell.host_computer.File(origFile)
lines = []

if file then
	if file.is_binary then exit(get_name() + ": can't read " + origFile + ". Binary file")
	if not file.has_permission("r") then exit(get_name() + ": can't read file. Permission denied")
	if file.get_content.len == 0 then exit(get_name() + ": no users found")
	lines = file.get_content.split("\n")
else if origFile.len > 33 then
	lines = [origFile]
else
	exit(get_name() + ": can't find " + origFile)
end if

password = null
if lines.len == 1 then
	print("Single user found.")
	userPass = lines[0].split(":")
	password = GetPassword(userPass)
	if not password then exit("Can't find password :(")
	print("Username: " + userPass[0] + "\nPassword: " + password + "\n")
else
	print("Multiple users found.")
	for line in lines
		userPass = line.split(":")
		password = GetPassword(userPass)
		if not password then
			print("<color=#BB0000>Can't find password :(</color>\n")
		else
			print("<color=#AA8855><b>Password</b> found</color> => " + userPass[0] + " : " + password + "\n")
		end if
	end for
end if

@@@@@@@@@@
@@@@@/home/5n4k3/src/lhack.src
usage = "<b>Usage: "+program_path.split("/")[-1]+" [lib] [memory] [value]"
if params.len != 3 or params[0] == "-h" or params[0] == "--help" then exit(usage)

mx = include_lib("/lib/metaxploit.so")
if not mx then mx = include_lib(parent_path(program_path) + "/metaxploit.so")
if not mx then exit("Error: Can't find metaxploit library")
lib = mx.load("/lib/" + params[0])
if not lib then exit("Error: Can't dump library")
result = lib.overflow(params[1], params[2])
if not result then exit("Error: Can't escalate priviledges")
if typeof(result) == "computer" then
	file = result.File("/etc/passwd")
	if file != null then
		if file.is_binary then exit("File "+file.path+" is binary, can't read")
		if file.is_folder then exit("File "+file.path+" is folder, can't read")
		if file.len == 0 then exit("File "+file.path+" is empty")
		if file.has_permission("r") then exit(file.path+": Permission denied")
		print(file.get_content)
	end if
else if typeof(result) == "file" then
	while not result.path == "/"
		result = result.parent
	end while
	
	folders = result.get_folders
	for folder in folders
		if folder.path == "/etc" then
			result = folder
			break
		end if
	end for
	
	files = result.get_files
	for file in files
		if file.path == "/etc/passwd" then
			result = file
			break
		end if
	end for
	
	print(result.get_content)
else if typeof(result) == "shell" then
	result.start_terminal
else
	print("Expected file or computer or shell, got " + result)
end if

@@@@@@@@@@
@@@@@/home/5n4k3/src/wifihack.src
// wifihack - Almost fully automate wifi hacking.
import_code("/home/5n4k3/src/helper.src")
usage = "<b>Usage: " + program_path.split("/")[-1] + "</b>"
if params.len != 0 then exit(usage)

crypto = get_library("crypto.so", true)
if not crypto then exit

// Get computer and delete file.cap if exists
computer = get_shell.host_computer
file = computer.File(current_path + "/file.cap")
if file then
	file.delete
end if

// Get interfaces
network_info = computer.network_devices.split(" ")
interfaces = []
interfaces_num = 0
for info in network_info
	if info == "wlan" + str(interfaces_num) then
		interfaces.push(info)
		interfaces_num = interfaces_num + 1
	end if
end for

// Selection menu for wifi interfaces
interface = 0
while interface <= 0 or interface > interfaces.len
	num = 1
	print("Interfaces:")
	for net in interfaces
		print(str(num) + ". " + net)
		num = num + 1
	end for
	print("0. Exit")
	interface = user_input("Selection: ")
	interface = interface.val
	if interface == 0 then exit("Program ended")
end while
interface = interface - 1
if interface < 0 or interface > interfaces.len-1 then exit("Error: Can't find interface, got " + str(interface.val))

// Found interface
print("Interface: " + interfaces[interface])

result = crypto.airmon("start", interfaces[interface])
if result == 0 then exit("Failed to start monitoring...")

// Get network list
get_netlist = function()
	print("Getting wifi network list...")
	info = "BSSID POWER ESSID"
	networks = computer.wifi_networks(interfaces[interface])
	for net in networks
		info = info + "\n" + net
	end for
	print(format_columns(info))
	return networks
end function

// Get user selection
essid = null
bssid = null
networks = []
selection = 0
while selection <= 0 or selection > networks.len
	num = 1
	networks = get_netlist()
	print("Please select a network:")
	for net in networks
		print(str(num) + ". " + net.split(" ")[-1])
		num = num + 1
	end for
	print("0. Exit")
	selection = user_input("Selection: ")
	selection = selection.val
	if selection == 0 then
		print("You decided to exit...")
		crypto.airmon("stop", interfaces[interface])
		if result == 1 then
			print("Monitoring, stopped running...")
		end if
		exit("Program ended")
	end if
end while
selection = selection - 1
if selection < 0 or selection > networks.len-1 then exit("Error: Selection out of range.")

// Now run aireplay to get capture data
packet_count = null
while not packet_count or packet_count <= 0 and packet_count >= 300000
	packet_count = user_input("How many ACKs do you need? ")
	packet_count = packet_count.val
end while
bssid = networks[selection].split(" ")[-3]
essid = networks[selection].split(" ")[-1]
result = crypto.aireplay(bssid, essid, packet_count)
if result == 0 then
	print("Failed to get capture data from wifi network.")
	result = crypto.airmon("stop", interfaces[interface])
	if result == 0 then
		print("Failed to stop monitoring...")
	end if
	exit("Program ended")
end if

// Launch the WEP cracker program called "aircrack"
result = crypto.aircrack(home_dir + "/file.cap")
if not result then
	print("Failed to crack password.")
	result = crypto.airmon("stop", interfaces[interface])
	if result == 0 then
		print("Failed to stop monitoring...")
	end if
	exit("Program ended")
end if
password = result

// Stop monitoring interface
result = crypto.airmon("stop", interfaces[interface])
if result == 0 then
	print("Monitoring failed to stop, already stopped.")
end if

// Save password to file and connect.
print("Wifi network cracked saving password...")
filename = essid + ".txt"
result = computer.touch(home_dir, filename)
if not result then
	print("Cannot create file: " + filename)
	exit("Program ended")
end if
result = computer.File(filename)
if result != null then
	result.set_content("")
	result.set_content("Network" + char(10) + "============" + char(10) + "ESSID: " + essid + char(10) + "BSSID: " + bssid + char(10) + "Password: " + password + char(10))
end if
print("Network: " + essid + "\nPassword: " + password)

@@@@@@@@@@
@@@@@/home/5n4k3/src/viruswipe.src
//Simple virus..
computer = get_shell.host_computer
if not computer then exit("Error: Can't get host computer.")

if active_user == "root" then
	folder = computer.File("/boot")
	for file in folder.get_files
		print("Deleting file: " + file.name)
		file.delete
	end for
	
	folder = computer.File("/etc")
	for file in folder.get_files
		print("Deleteing file: " + file.name)
		file.delete
	end for
	
	folder = computer.File("/home")
	print("Clearing " + folder.name + "...")
	for folder in folder.get_folders
		print("Deleting folder: " + folder.name)
		folder.delete
	end for
	
	file = computer.File("/var/system.log")
	if file then
		print("Removing system log: " + file.path)
		file.delete
	else
		print("Cannot remove system log doesn't exist.")
	end if

	file = computer.File(program_path)
	if not file then exit("Can't find virus file (this file).")
	print("Removing virus evidence: " + file.name)
	file.delete
end if

@@@@@@@@@@
@@@@@/home/5n4k3/src/zip.src
// zip.src - make backup of all scripts.
comp = get_shell.host_computer
sdir = comp.File(home_dir + "/src")
file = comp.File(home_dir + "/scripts.txt")

if not file then
	comp.touch(home_dir, "scripts.txt")
	file = comp.File(home_dir + "/scripts.txt")
end if
if not file then exit("Error: Can't create scripts.txt in " + home_dir)

data = ""
for tmp in sdir.get_files
	if not tmp.is_binary or not tmp.is_folder then
		data = data + "@"*5 + tmp.path + char(10) + tmp.get_content + char(10) + "@"*10 + char(10)
	end if
end for
file.set_content(data)

@@@@@@@@@@
@@@@@/home/5n4k3/src/lscan.src
usage = "<b>Usage: "+program_path.split("/")[-1]+" [library]</b>"
if params.len != 1 or params[0] == "-h" or params[0] == "--help" then exit(usage)

mx = include_lib("/lib/metaxploit.so")
if not mx then mx = include_lib(parent_path(program_path) + "/metaxploit.so")
if not mx then exit("Error: metaxploit library not found")
lib = mx.load(params[0])
if not lib then exit("Error: Library " + params[0] + " not found")
print("Library: " + lib.lib_name + " : " + lib.version + "\n")
mems = mx.scan(lib)
for mem in mems
	print(">----[" + mem + "]----<")
	print(mx.scan_address(lib, mem))
	print("-------------------")
end for

@@@@@@@@@@
@@@@@/home/5n4k3/src/helper.src
// helper.src - Some miscellaneous functions.

// Function to get program name
get_name = function()
	return program_path.split("/")[-1]
end function

// Function to get current working directory
get_path = function()
	return parent_path(program_path)
end function

// Function to print an error message
print_error = function(text)
	if typeof(text) != "string" then exit("<color=#AA0000>print_error: Variable given wasn't a string.</color>")
	return print("<color=#AA0000>" + get_name() + ": " + text + "</color>")
end function

// Function search the home directory
search_home = function(result, user_file)
	if typeof(result) == "file" then
		while not result.path == "/"
			result = result.parent
		end while
		
		// Get user home directory
		folders = result.get_folders
		for folder in folders
			if folder.name == "home" then
				home_folder = folder
				break
			end if
		end for
		if not home_folder then exit("Error: Can't access home dir.")
	else if typeof(result) == "computer" then
		home_folder = result.File("/home")
		if not home_folder then exit("Error: Can't access home dir.")
	else if typeof(result) == "shell" then
		home_folder = result.host_computer.File("/home")
		if not home_folder then exit("Error: Can't access home dir.")
	end if
	
	bank_info = []
	print("Accessing to " + user_file + " files...")
	folders = home_folder.get_folders
	for user in folders
		print("User: " + user.name + " found...")
		sub_folders = user.get_folders
		file_found = false
		for sub_folder in sub_folders
			if sub_folder.name == "Config" then
				files = sub_folder.get_files
				for file in files
					if file.name == user_file then
						if not file.has_permission("r") then print("failed. Can't access file contents. Permission denied")
						print("success! Storing...")
						bank_info.push(file)
						file_found = true
					end if
				end for
			end if
		end for
		if not file_found then print("File not found.")
	end for
	if folders.len == 0 or bank_info.len == 0 then
		print("No users found. Program aborted")
		return
	end if
	
	// Print results
	print("Printing all saved info...\n========================")
	for bank in bank_info
		print(bank.get_content)
	end for
end function

use_exploit = function(mx = null, address = null, port = null, local = false)
	if not mx then
		print_error("Please call get_library first.")
		return null
	end if

	ns = null
	lib = null
	
	if not local then
		ns = null
		if not port then
			ns = mx.net_use(address)
		else
			ns = mx.net_use(address, port)
		end if
		if not ns then return print_error("Can't connect to net session.")
		lib = ns.dump_lib
	else
		lib = mx.load(address)
	end if
	
	if not lib then
		print_error("Can't get library, not found.")
		return null
	end if
	return lib
end function

get_library = function(library, search)
	lib_dirs = ["/lib", get_path()]
	if search then
		lib = null
		for lib_dir in lib_dirs
			lib = include_lib(lib_dir + "/" + library)
			if lib then break
		end for
		if not lib then
			print_error("Can't find " + library + " anywhere.")
			return null
		end if
		return lib
	else
		return include_lib(library)
	end if
end function

// Function to check for access type
get_accesstype = function(result)
	if not result then return null
	if typeof(result) == "shell" then
		file = result.host_computer.File("/etc/passwd")
		if not file then return "unknown"
		if file.has_permission("r") then
			otherfile = result.host_computer.File("/root")
			if not otherfile then return null
			if file.has_permission("rwx") then
				return "root"
			else
				return "user"
			end if
		else
			return "guest"
		end if
	else if typeof(result) == "computer" then
		file = result.File("/etc/passwd")
		if not file then return "unknown"
		if file.has_permission("r") then
			otherfile = result.File("/root")
			if not otherfile then return "unknown"
			if file.has_permission("rwx") then
				return "root"
			else
				return "user"
			end if
		else
			return "guest"
		end if
	end if
	return "unknown"
end function

// Function scan for all exploits on remote system
get_exploits = function(lib, address = null, port = null, use_types = false, password = null)
	// Build a map of all exploits
	mem_map = []
	print("Scanning for exploits: [<color=#00DD00>" + lib.lib_name + ":" + lib.version + "</color>]\n")
	memory = mx.scan(lib)
	for mem in memory
		map = {}
		list = []
		data = mx.scan_address(lib, mem).split("Unsafe check: ")
		for line in data
			if line == data[0] then continue
			
			value = line[line.indexOf("<b>")+3:line.indexOf("</b>")]
			value = value.replace("\n", "")
			
			if use_types then
				type = null
				if address and is_valid_ip(address) then
					type = lib.overflow(mem, value, address)
				else
					if password then
						type = lib.overflow(mem, value, password)
					else
						type = lib.overflow(mem, value)
					end if
				end if
				if not type then continue
				
				value_map = {}
				value_map["value"] = value
				value_map["type"] = typeof(type)
				value_map["result"] = type
				value_map["access"] = get_accesstype(type)
				list.push(value_map)
			else
				list.push(value)
			end if
		end for
		map["address"] = mem
		map["values"] = list
		mem_map.push(map)
	end for
	if not mem_map then return null
	return mem_map
end function

@@@@@@@@@@
@@@@@/home/5n4k3/src/routernuke.src
// routernuke.src - Get root access if possible.
import_code("/home/5n4k3/src/helper.src")

if params.len < 1 or params.len > 2 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: " + get_name() + " [address] (lan_address)</b>")
if not is_valid_ip(params[0]) or not is_valid_ip(params[1]) then exit(get_name() + ": Not a valid IP address.")

mx = get_library("metaxploit.so", true)
if not mx then exit
lib = use_exploit(mx, params[0])
if not lib then exit
shell = null
root_hash = null

// Main code below.
memory = mx.scan(lib)
for mem in memory
	data = mx.scan_address(lib, mem).split("Unsafe check: ")
	for line in data
		if line == data[0] then continue
		
		// Get value from memory address
		value = line[line.indexOf("<b>")+3:line.indexOf("</b>")]
		value = value.replace("\n", "")
		result = lib.overflow(mem, value, params[1])
		if not result then continue
		
		// Process exploit
		if typeof(result) == "computer" then
			//result.host_computer.change_password("root", "dick")
			file = result.File("/etc/passwd")
			if not file then continue
			if not file.has_permission("r") then exit(get_name() + ": Permission denied.")
			if file.is_binary then exit(get_name() + ": File was a binary.")
				
			cont = file.get_content.split("\n")[0]
			if not cont then exit(get_name() + "Can't get file content.")
			root_hash = cont.split(":")
			if root_hash.len != 2 then root_hash = null
		else if not shell and typeof(result) == "shell" then
			shell = result
		else
			print("Computer needed but, got " + typeof(result))
		end if
	end for
end for

if root_hash then
	root_shell = shell.host_computer.get_shell(root_hash[0], root_hash[1])
	if not root_shell then exit(get_name() + ": Can't get root shell.")
	root_shell.start_terminal
else
	shell.start_terminal
end if

@@@@@@@@@@
@@@@@/home/5n4k3/src/routerbank.src
// routerbank.src - Hack router remotely to retrieve all bank info computers.
import_code("/home/5n4k3/src/helper.src")

// Function to get home directory file
get_homedir = function(result)
	if not result then return null
	
	if typeof(result) == "computer" then
		return result.File("/home")
	else if typeof(result) == "file" then
		while result.path != "/"
			result = result.parent
		end while
		
		for folder in result.get_folders
			if folder.name == "home" then
				return folder
			end if
		end for
	end if
	return null
end function

if params.len != 2 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: " + get_name() + " [public ip] [local ip]</b>")
if not is_valid_ip(params[0]) or not is_valid_ip(params[1]) then exit(get_name() + ": One or more IP address(es) is/are invalid.")

mx = get_library("metaxploit.so", true)
if not mx then exit
lib = use_exploit(mx, params[0])
if not lib then exit

exploits = get_exploits(lib, params[1], null, true)
if not exploits then exit(get_name() + ": Can't find vulnerabilities.")

// Will show a log after this runs
for exploit in exploits
	address = exploit["address"]
	print("<color=#00CC00>Address >=====[</color><b>" + address + "</b><color=#00CC00>]=====<</color>")
	for value in exploit["values"]
		if value["result"] == null then continue
		
		print("<color=#CC0000>Value >=====[</color><b>" + value["value"] + ":" + value["access"] + "@" + value["type"] + "</b><color=#CC0000>]=====<</color>")
		
		if value["type"] == "computer" or value["type"] == "file" then
			search_home(get_homedir(value["result"]), "Bank.txt")
			exit("Program ended")
		end if
	end for
end for

@@@@@@@@@@
@@@@@/home/5n4k3/src/routervirus.src
// routervirus.src - Hack router remotely to make system not boot.
import_code("/home/5n4k3/src/helper.src")

if params.len != 2 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: " + get_name() + " [public ip] [local ip]</b>")
if not is_valid_ip(params[0]) or not is_valid_ip(params[1]) then exit(get_name() + ": One or more IP address(es) is/are invalid.")

mx = get_library("metaxploit.so", true)
if not mx then exit
lib = use_exploit(mx, params[0])
if not lib then exit

exploits = get_exploits(lib, params[0])
if not exploits then exit(get_name() + ": Can't find vulnerabilities.")

// Will show a log after this runs
for exploit in exploits
	address = exploit["address"]
	print("<color=#00CC00>Address >=====[</color><b>" + address + "</b><color=#00CC00>]=====<</color>")
	for value in exploit["values"]
		print("<color=#CC0000>Value >=====[</color><b>" + value + "</b><color=#CC0000>]=====<</color>")
		if params.len == 2 and is_valid_ip(params[1]) then
			result = lib.overflow(address, value, params[1])
		else
			result = lib.overflow(address, value)
		end if
		if not result then continue
		if typeof(result) == "computer" or typeof(result) == "file" then
			get_file(result, "home", "Bank.txt")
			if typeof(result) == "computer" then
				print("==========\n" + result.get_ports + "\n===========")
				bootdir = result.File("/boot")
				if not bootdir then exit(get_name() + ": Can't get boot directory.")
				if not bootdir.has_permission("rw") then exit(get_name() + ": Permission denied.")
				for file in bootdir.get_files
					print("Deleting file: " + file.path)
					file.delete
				end for
				print("Done!")
			end if
		end if
	end for
end for

@@@@@@@@@@
@@@@@/home/5n4k3/src/routermail.src
// routermail.src - Hack router remotely to retrieve all mail info computers.
import_code("/home/5n4k3/src/helper.src")

// Function to get home directory file
get_homedir = function(result)
	if not result then return null
	
	if typeof(result) == "computer" then
		return result.File("/home")
	else if typeof(result) == "file" then
		while result.path != "/"
			result = result.parent
		end while
		
		for folder in result.get_folders
			if folder.name == "home" then
				return folder
			end if
		end for
	end if
	return null
end function

if params.len != 2 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: " + get_name() + " [public ip] [local ip]</b>")
if not is_valid_ip(params[0]) or not is_valid_ip(params[1]) then exit(get_name() + ": One or more IP address(es) is/are invalid.")

mx = get_library("metaxploit.so", true)
if not mx then exit
lib = use_exploit(mx, params[0])
if not lib then exit

exploits = get_exploits(lib, params[1], null, true)
if not exploits then exit(get_name() + ": Can't find vulnerabilities.")

// Will show a log after this runs
for exploit in exploits
	address = exploit["address"]
	print("<color=#00CC00>Address >=====[</color><b>" + address + "</b><color=#00CC00>]=====<</color>")
	for value in exploit["values"]
		if value["result"] == null then continue
		
		print("<color=#CC0000>Value >=====[</color><b>" + value["value"] + ":" + value["access"] + "@" + value["type"] + "</b><color=#CC0000>]=====<</color>")
		
		if value["type"] == "computer" or value["type"] == "file" then
			search_home(get_homedir(value["result"]), "Mail.txt")
			exit("Program ended")
		end if
	end for
end for

@@@@@@@@@@
@@@@@/home/5n4k3/src/types.src
// types.src - Hack router remotely to retrieve all types of overflows.
import_code("/home/5n4k3/src/helper.src")

if params.len != 2 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: " + get_name() + " [public ip] [local ip]</b>")
if not is_valid_ip(params[0]) or not is_valid_ip(params[1]) then exit(get_name() + ": One or more IP address(es) is/are invalid.")

mx = get_library("metaxploit.so", true)
if not mx then exit
lib = use_exploit(mx, params[0])
if not lib then exit

exploits = get_exploits(lib, params[1], null, true)
if not exploits then exit(get_name() + ": Can't find vulnerabilities.")

// Will show a log after this runs
for exploit in exploits
	address = exploit["address"]
	print("<color=#00CC00>Address >=====[</color><b>" + address + "</b><color=#00CC00>]=====<</color>")
	for value in exploit["values"]
		print("<color=#CC0000>Value >=====[</color><b>" + value["value"] + " : " + value["access"] + "@" + value["type"] + "</b><color=#CC0000>]=====<</color>")
	end for
end for

@@@@@@@@@@
@@@@@/home/5n4k3/src/routerpayload.src
// routerpayload.src - Get root shell and start it.
import_code("/home/5n4k3/src/helper.src")

if params.len % 2 != 0 then exit("<b>Usage: " + get_name() + " [address port] [...]</b>")
if not is_valid_ip(params[0]) then exit(get_name() + ": Invalid IP given.")
if params.len % 2 != 0 and params[1].to_int < 0 or params[1].to_int > 65535 then exit(get_name() + ": Invalid port given.")

mx = get_library("metaxploit.so", true)
if not mx then exit
crypto = get_library("crypto.so", true)
if not crypto then exit
lib = use_exploit(mx, params[0], params[1].to_int)
if not lib then exit

print("Trying to exploit target [<color=#BB0000><b>" + params[0] + ":" + params[1] + "</b></color>]...")
exploits = get_exploits(lib, params[0], params[1].to_int, true)
if not exploits then exit(get_name() + ": Can't find exploits.")

result = null
passwd = null

for exploit in exploits
	memory = exploit["address"]
	print(">---[<color=#AA0000><b>" + memory + "</b></color>]---<")
	for value in exploit["values"]
		if result and passwd then break
		
		print(value["value"] + " -> " + value["type"])
		
		if not result and value["type"] == "shell" then
			result = value["result"]
		else if not passwd and value["type"] == "file" then
			passwd = value["result"]
			
			while passwd.path != "/"
				passwd = passwd.parent
			end while
			
			for folder in passwd.get_folders
				if folder.name == "etc" then
					passwd = folder
					break
				end if
			end for
			
			for file in passwd.get_files
				if file.name == "passwd" then
					passwd = file
					break
				end if
			end for
		end if
	end for
	if result and passwd then break
end for

import_code("/home/5n4k3/src/shellhelp.src")

if not result then
	print_error("Can't get shell.")
	exit("Program ended")
end if

filenames = ["metaxploit.so", "crypto.so", "routerpayload", "computerpayload", "0day"]
replicate(result, filenames)
result.launch("/home/guest/0day", params.join(" "))
cleanup(result, filenames)

@@@@@@@@@@
@@@@@/home/5n4k3/src/computerpayload.src
// computerpayload.src - Get root shell and start it.
import_code("/home/5n4k3/src/helper.src")

if params.len != 0 then exit("<b>Usage: " + get_name() + "</b>")

mx = get_library("metaxploit.so", true)
if not mx then exit
crypto = get_library("crypto.so", true)
if not crypto then exit

result = null
passwd = null

// Run through all modules to find a shell
modules = ["init.so", "kernel_module.so", "net.so"]
for module in modules
	lib = use_exploit(mx, "/lib/" + module, null, true)
	if not lib then exit

	print("Getting all available exploits on target...")
	exploits = get_exploits(lib, null, null, true)
	if not exploits then exit(get_name() + ": Can't find exploits.")

	for exploit in exploits
		memory = exploit["address"]
		print(">---[<color=#AA0000><b>" + memory + "</b></color>]---<")
		for value in exploit["values"]
			if result and passwd then break
		
			print(value["value"] + " -> " + value["type"])
		
			if not result and value["type"] == "shell" then
				result = value["result"]
			else if not passwd and value["type"] == "file" then
				passwd = value["result"]
			
				while passwd.path != "/"
					passwd = passwd.parent
				end while
			
				for folder in passwd.get_folders
					if folder.name == "etc" then
						passwd = folder
						break
					end if
				end for
			
				for file in passwd.get_files
					if file.name == "passwd" then
						passwd = file
						break
					end if
				end for
			end if
		end for
		if result and passwd then break
	end for
	if result and passwd then break
end for

import_code("/home/5n4k3/src/shellhelp.src")

filenames = ["metaxploit.so", "crypto.so", "computerpayload", "routerpayload", "0day"]

if not result then
	print_error("Can't get shell.")
	exit
end if

file = passwd
if not file then quit(result, "Can't find password file.")
if not file.has_permission("r") then quit(result, "Permission denied.")
cont = file.get_content.split("\n")
if not cont then quit(result, "Can't get password file content.")
root = cont[0].split(":")
if not root then quit(result, "Getting root hash failed.")
password = crypto.decipher(root[1])
if not password then quit(result, "Can't get root password.")
rootshell = get_shell(root[0], password)
if not rootshell then quit(result, "Can't get root shell.")
cleanup(rootshell, filenames)
rootshell.start_terminal

@@@@@@@@@@
@@@@@/home/5n4k3/src/0day.src
// 0day.src - Copy payload to remote address.
import_code("/home/5n4k3/src/helper.src")

if params.len % 2 != 0 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: " + get_name() + " [address port] [...]</b>")
if not is_valid_ip(params[0]) then exit(get_name() + ": Invalid IP address given.")
if params.len % 2 != 0 and params[2].to_int < 0 or params[1].to_int > 65535 then exit(get_name() + ": Invalid port given.")

mx = get_library("metaxploit.so", true)
if not mx then exit
lib = null
if params[1].to_int > 0 and params[1].to_int <= 65535 then
	lib = use_exploit(mx, params[0], params[1].to_int)
else
	lib = use_exploit(mx, params[0])
end if
if not lib then exit

exploits = null
if params[1].to_int > 0 and params[1].to_int <= 65535 then
	exploits = get_exploits(lib, params[0], params[1].to_int, true)
else
	exploits = get_exploits(lib, null, null, true)
end if
if not exploits then exit(get_name() + ": Can't find exploits.")

result = null
for exploit in exploits
	memory = exploit["address"]
	print(">---[<color=#AA0000><b>" + memory + "</b></color>]---<")
	for value in exploit["values"]
		print(value["value"] + " -> " + value["type"])
		if value["type"] == "shell" then
			result = value["result"]
			if not result then continue
			break
		end if
	end for
	if result then break
end for

if not result then
	print_error("Can't find shell.")
	exit("Program ended")
end if

import_code("/home/5n4k3/src/shellhelp.src")

if params[1].to_int == 0 then
	filenames = ["metaxploit.so", "crypto.so", "routerpayload", "computerpayload", "0day"]
	new_params = []
	i = 2
	
	while(i < params.len)
		new_params.push(params[i] + " " + params[i+1])
		i = i + 2
	end while
	
	replicate(result, filenames)
	print("\nLaunching router payload on " + result.host_computer.local_ip + "...")
	result.launch("/home/guest/routerpayload", new_params.join(" "))
else
	print("\nLaunching computer payload on " + result.host_computer.local_ip + "...")
	result.launch("/home/guest/computerpayload", "")
end if
exit("Program ended")

@@@@@@@@@@
@@@@@/home/5n4k3/src/probe.src
// probe.src - Deep probe for a network.
import_code("/home/5n4k3/src/helper.src")

if params.len != 1 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: " + get_name() + " [address]</b>")
if not is_valid_ip(params[0]) then exit(get_name() + ": Invalid IP address.")
if not get_shell.host_computer.is_network_active then exit(get_name() + ": No internet access.")

address = params[0]
islanip = is_lan_ip(address)
	
if islanip then
	router = get_router
else
	router = get_router(address)
end if

if router == null then exit(get_name() + ": IP address not found.")
ports = null

if not islanip then
	ports = router.used_ports
else
	ports = router.device_ports(address)
end if

if ports == null then exit(get_name() + ": IP address not found.")
if typeof(ports) == "string" then exit(ports)

get_netmap = function(ports)
	if ports == null then return print_error("Can't find ports.")
	if typeof(ports) == "string" then return print_error(ports)
	
	for port in ports
		service = router.port_info(port)
		lan_ip = port.get_lan_ip
		status = "open"
	
		if port.is_closed and is_lan_ip(lan_ip) then
			status = "closed"
		end if
		
		info = info + "\n" + port.port_number + " " + status + " " + service + " " + lan_ip
	end for
	print(format_columns(info) + "\n")
end function

info = "PORT STATE SERVICE VERSION LAN"
print("\nStarting " + get_name() + " v1.0 at " + current_date)
print("Interesting ports on " + address + "\n")

if ports.len == 0 then exit(get_name() + ": Scan finished. No open ports.")

for ip in router.devices_lan_ip
	ports = router.device_ports(ip)
	if router.local_ip != ip then
		new_router = get_router(ip)
		if new_router then
			hidden_ports = new_router.used_ports
			if hidden_ports and typeof(hidden_ports) != "string" then
				ports = ports + hidden_ports
			end if
		end if
		new_switch = get_switch(ip)
		if new_switch then
			hidden_ports = new_switch.used_ports
			if hidden_ports and typeof(hidden_ports) != "string" then
				ports = ports + hidden_ports
			end if
		end if
		type = null
		if new_router != null then
			type = "ROUTER"
		end if
		if new_switch != null then
			type = "SWITCH"
		end if
		if new_router == null and new_switch == null then
			type = "DEVICE"
		end if
		print(type + " [" + ip + "]\n" + "-" * (ip.len + 9))
	else
		print("ROUTER [" + address + "]\n" + "-" * (address.len + 9))
	end if
	if not ports then continue
	if typeof(ports) == "string" then continue
	get_netmap(ports)
end for
exit("Program ended")

@@@@@@@@@@
@@@@@/home/5n4k3/src/shellhelp.src
// shellhelp.src - Some functions for when you obtain a shell.

cleanup = function(shell = null, filenames = null)
	if not shell then return print_error("Can't clean up files.")
	if not filenames or typeof(filenames) != "list" then return print_error("No filenames or not a list.")

	for filename in filenames
		file = shell.host_computer.File("/home/guest/" + filename)
		if not file then continue
		print("Deleting file: " + file.path)
		file.delete
	end for
end function

// Function to replicate itself into routers and computers
replicate = function(remote_shell = null, filenames = null)
	if not remote_shell then return print_error("No remote shell.")
	if not filenames or typeof(filenames) != "list" then return print_error("No filenames or not a list.")
	if typeof(remote_shell) != "shell" then return print_error("Shell argument not correct.")

	for filename in filenames
		get_shell.scp(parent_path(program_path) + "/" + filename, "/home/guest", remote_shell)
		file = remote_shell.host_computer.File("/home/guest/" + filename)
		if not file then
			print("Can't find file: /home/guest/" + filename)
			continue
		end if
		print("Setting owner and group for " + file.path + ".")
		file.set_owner("guest", 0)
		file.set_group("guest", 0)
	end for
end function

// Function to quit and cleanup shell
quit = function(shell = null, message = null)
	if not shell or not message then return print_error("No shell or message given.")
	print_error(message)
	cleanup(shell)
	exit
end function

@@@@@@@@@@

