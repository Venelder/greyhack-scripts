if params.len != 2 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: "+program_path.split("/")[-1]+" [address] [port]</b>")
mx = include_lib("/lib/metaxploit.so")
if not mx then mx = include_lib(current_path + "/metaxploit.so")
if not mx then exit("Error: Can't find metaxploit")

address = params[0]
if not is_valid_ip(address) then exit("Error: Invalid IP address given.")
port = params[1].to_int

// Load up crypto.so library.
cryptools = include_lib("/lib/crypto.so")
if not cryptools then
	cryptools = include_lib(current_path + "/crypto.so")
end if
if not cryptools then exit("Error: Can't find crypto.so library in the /lib path or the current folder")

GetMoney = function(result)
	GetPassword = function(userPass)
		if userPass.len != 2 then exit("decipher: wrong syntax")
		password = cryptools.decipher(userPass[1])
		return password
	end function

	typeObject = typeof(result)
	if(typeObject != "computer") then exit("Error: expected computer, obtained " + typeObject)
	homeFolder = result.File("/home")
	if not homeFolder then exit("Error: /home folder not found")
	userFolders = homeFolder.get_folders
	found = false
	for userFolder in userFolders
		bankFile = result.File("/home/" + userFolder.name + "/Config/Bank.txt")
		if not bankFile then continue
		if not bankFile.has_permission("r") then exit("Error: can't read file contents. Permission deniend")
		userPass = bankFile.get_content.split(":")
		print("Deciphering bank password for user: " + userFolder.name)
		password = GetPassword(userPass)
		if not password then 
			print("Nothing found...")
		else
			print("Bank account: " + userPass[0] +"\nBank Password: " + password)
		found = true
		end if
	end for
	if not found then print("No files found")
end function

GetMoneyFile = function(homeFolder, userFile)
	GetPassword = function(userPass)
		if userPass.len != 2 then exit("decipher: wrong syntax")
		password = cryptools.decipher(userPass[1])
		return password
	end function

	print("Accessing to " + userFile + " files...\nSearching users...")
	folders = homeFolder.get_folders
	for user in folders
		print("User: " + user.name + " found...")
		subFolders = user.get_folders
		bankFound = false
		for subFolder in subFolders
			if subFolder.name == "Config" then
				files = subFolder.get_files
				for file in files
					if file.name == userFile then
						if not file.has_permission("r") then print("failed. Can't access file contents. Permission denied")
						print("success! Decrypting...")
						password = GetPassword(file.get_content.split(":"))
						if password != null then
							print("Acct: " + file.get_content.split(":")[-2] + "\nPass: " + password)
						end if
						bankFound = true
					end if
				end for
			end if
		end for
		if not bankFound then print("Bank file not found.")
	end for
	if folders.len == 0 then print("No users found. Program aborted")
end function

// Scan and try all methods
ns = mx.net_use(address, port)
if not ns then exit("Error: Can't connect to net session")
lib = ns.dump_lib
if not lib then exit("Error: Can't dump library")
print("Running all exploits against " + address + "...")
print("Library: " + lib.lib_name + " : " + lib.version)

memory = mx.scan(lib)
if not memory then exit("Error: Can't scan library")
for mem in memory
	address = mx.scan_address(lib, mem).split("Unsafe check: ")
	for addr in address
		if addr == address[0] then continue
		
		// Get all values from library
		value = addr[addr.indexOf("<b>")+3:addr.indexOf("</b>")]
		value = value.replace("\n", "")
		result = lib.overflow(mem, value)
		if not result then continue

		// Check for shell or computer
		if typeof(result) == "computer" then
			GetMoney(result)
			exit("Program ended")
		else if typeof(result) == "file" then
			if result.path == "/home" then
				GetMoneyFile(result, "Bank.txt")
				exit("Program ended")
			else
				print("Searching home folder...")
				while not result.path == "/"
					result = result.parent
				end while
					
				folders = result.get_folders
				for folder in folders
					if folder.path == "/home" then
						GetMoneyFile(folder, "Bank.txt")
						exit("Program ended")
					end if
				end for
			end if
		end if
	end for
end for

