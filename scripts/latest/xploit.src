///////////////////////////////////////////////////////////////////
// xploit.src - Multipurpose hacking and scanning tool.
// Entire source written by Philip "5n4k3" Simonson
///////////////////////////////////////////////////////////////////

// Function to get program name
get_name = function()
	return program_path.split("/")[-1]
end function

// Function to get program path
get_path = function()
	result = program_path.split("/")
	result.remove(result.len - 1)
	result = result.join("/")
	return result
end function

// Function to get metaxploit library
get_xploit = function()
	xploit = include_lib("/lib/metaxploit.so")
	if not xploit then xploit = include_lib(get_path() + "/metaxploit.so")
	if not xploit then exit(get_name() + ": metaxploit.so not found.")
	return xploit
end function

// Function for built-in xmap
use_xmap = function(address)
	islanip = is_lan_ip(address)

	print_ports = function(ports)
		if typeof(ports) == "string" then return print(ports)
		if ports.len == 0 then return print("Scan finished. No open ports.\n")
	
		info = "PORT STATE SERVICE VERSION LAN"
		for port in ports
			service_info = router.port_info(port)
			lan_ip = port.get_lan_ip
			port_status = "open"
			if port.is_closed then
				port_status = "closed"
			end if
			info = info + "\n" + port.port_number + " " + port_status + " " + service_info + " " + lan_ip
		end for
		print(format_columns(info) + "\n")
	end function

	if islanip then
	   router = get_router;
	else 
	   router = get_router(address)
	end if

	if router == null then return print("Error: IP address not found.")
	print("\nStarting xmap v1.0 at " + current_date)
	print("Interesting ports on " + address + "\n")

	print_ports(router.used_ports)
	ports = []
	for lan in router.devices_lan_ip
	   ports = ports + router.device_ports(lan)
	end for
	print_ports(ports)
end function

// Get bank or mail from server
use_getfile = function(address, port, user_file)
	GetFile = function(result, userFile)
		if typeof(result) == "file" then
			while not result.path == "/"
				result = result.parent
			end while
		
			// Get user home directory
			folders = result.get_folders
			for folder in folders
				if folder.name == "home" then
					homeFolder = folder
					break
				end if
			end for
			if not homeFolder then return print("Error: Can't access home dir.")
		else if typeof(result) == "computer" then
			homeFolder = result.File("/home")
			if not homeFolder then return print("Error: Can't access home dir.")
		end if

		result_list = []
		print("Accessing to " + userFile + " files...\nSearching users...")
		folders = homeFolder.get_folders
		for user in folders
			print("User: " + user.name + " found...")
			subFolders = user.get_folders
			fileFound = false
			for subFolder in subFolders
				if subFolder.name == "Config" then
					files = subFolder.get_files
					for file in files
						if file.name == userFile then
							if not file.has_permission("r") then print("failed. Can't access file contents. Permission denied")
							if file.is_binary then print("failed. Can't access binary file.")
							if file then
								print("success! Storing: " + file.path)
								result_list.push(file)
							end if
							fileFound = true
						end if
					end for
				end if
			end for
			if not fileFound then print("Bank file not found.")
		end for
		
		// Print results
		if result_list.len == 0 then return print("No results found!")
		print("Listing all " + userFile + " content...")
		for file in result_list
			line = file.get_content.split(":")
			if line.len != 2 then continue
			print(line[0] + ":" + md5(line[1]))
		end for
	end function
	
	// Initialize metaxploit
	mx = get_xploit()
	if not mx then return print(get_name() + ": Can't find metaxploit.")
	ns = mx.net_use(address, port)
	if not ns then return print(get_name() + ": Can't connect to net session.")
	lib = ns.dump_lib
	if not lib then return print(get_name() + ": Can't dump library.")

	// Print some messages related to library
	print("Running all exploits against " + address + "...")
	print("Library: " + lib.lib_name + " : " + lib.version)

	// Scan all available exploits against target
	memory = mx.scan(lib)
	if not memory then return print("Error: Can't scan library")
	for mem in memory
		address = mx.scan_address(lib, mem).split("Unsafe check: ")
		for addr in address
			if addr == address[0] then continue
		
			// Get all values from library
			value = addr[addr.indexOf("<b>")+3:addr.indexOf("</b>")]
			value = value.replace("\n", "")
			result = lib.overflow(mem, value)
			if not result then continue

			// Check for shell or computer
			if typeof(result) == "computer" then
				GetFile(result, user_file)
				return
			else if typeof(result) == "file" then
				if result.path == "/home" then
					GetFile(result, user_file)
					return
				else
					print("Searching home folder...")
					while not result.path == "/"
						result = result.parent
					end while

					folders = result.get_folders
					for folder in folders
						if folder.path == "/home" then
							GetFile(folder, user_file)
							return
						end if
					end for
				end if
			end if
		end for
	end for
end function

// Function built-in scanner/exploiter
use_xploit = function(address, port, flag)
	shell = null		// Global shell variable
	
	// Function to get the password file at /etc
	get_passwd = function(result)
		if typeof(result) == "computer" then
			file = result.File("/etc/passwd")
			if not file then return null
			if file.is_binary then return null
			if not file.has_permission("r") then
				print(file.path + ": Permission denied.")
				return null
			end if
			return file
		else if typeof(result) == "file" then
			while result.path != "/"
				result = result.parent
			end while
			
			// Get all folders in root directory
			folders = result.get_folders
			for folder in folders
				if folder.name == "etc" then
					result = folder
					break
				end if
			end for
			if not result then return null
			if not result.is_binary then return null
			
			// Get all files in /etc
			files = result.get_files
			for file in files
				if file.name == "passwd" then
					result = file
					break
				end if
			end for
			if not result then return null
			if result.is_binary then return null
			if not result.has_permission("r") then
				print(result.path + ": Permission denied.")
				return null
			end if
			return result
		end if
	end function

	// Function to do something with the result.
	do_result = function(computer, userfile)
		rootPass = null
		
		// Get password file
		result = computer
		if not result then result = userfile
		if result then
			file = get_passwd(result)
			if file then
				rootline = file.get_content.split("\n")[0]
				if rootline then
					line = rootline.split(":")
					rootpass = md5(line[1])
				end if
			end if
		end if
				
		// Start new shell
		if rootPass and shell then
			get_shell.scp(current_path + "/", "xploit", shell)
			get_shell.scp(current_path + "/", "metaxploit.so", shell)
			shell.host_computer.get_shell("root", rootPass)
		else if shell then
			get_shell.scp(current_path + "/", "xploit", shell)
			get_shell.scp(current_path + "/", "metaxploit.so", shell)
			shell.start_terminal
		end if
	end function

	// Get exploit library
	xploit = get_xploit()
	if not xploit then exit
	
	// Get library for address or address and port.
	ns = null
	if not port then
		ns = xploit.net_use(address)
	else
		ns = xploit.net_use(address, port)
	end if
	if not ns then return print(get_name() + ": Can't connect to net session.")
	
	// Get library that the connect has.
	lib = ns.dump_lib
	if not lib then return print(get_name() + ": Can't dump the current library.")
	computer = null
	userfile = null
	
	// Scan for memory addresses
	print("Library: " + lib.lib_name + " : " + lib.version)
	memory = xploit.scan(lib)
	for mem in memory
		if not flag then
			print("Address >-----[" + mem + "]-----<")
		end if
		
		address = xploit.scan_address(lib, mem).split("Unsafe check: ")
		num = 0
		
		// Process all unsafe checks
		for addr in address
			if addr == address[0] then continue
			
			// Get all values from library
			value = addr[addr.indexOf("<b>")+3:addr.indexOf("</b>")]
			value = value.replace("\n", "")
			if flag then
				result = lib.overflow(mem, value)
				if not result then continue
				if typeof(result) == "shell" then
					shell = result
				else if typeof(result) == "computer" then
					computer = result
				else if typeof(result) == "file" then
					userfile = result
				end if
			else
				print("Value " + str(num) + ": " + value)
				num = num + 1
			end if
		end for
	end for

	do_result(computer, userfile)
end function

start_message = "******************************************************\n" + "*      ___    ___                                    *\n" + "*       \ \  / /   ______  ___          _  ___       *\n" + "*        \ \/ /   /  ___ \ | |    ___  |_| | |_      *\n" + "*        / /\ \   | |___|| | |_  | | |  _  |  _|     *\n" + "*       / /  \ \  | _____/ |___| | | | | | | |       *\n" + "*      ---------- | |             ---   -   -        *\n" + "*                  -                                 *\n" + "******************************************************\n"

// Actual program below
if params.len != 0 then exit("<b>Usage: " + get_name() + "</b>")

// Print initial message of xploit
print(start_message)

while true
	address = null
	port = null
	option = null
	
	while not option or option != 0
		print("1. Remote Exploit Scanner")
		print("2. Xmap Port Scanner")
		print("3. Remote Exploit")
		print("4. Get Mail Files")
		print("5. Get Bank Files")
		print("0. Exit")
		
		option = user_input("Option: ")
		option = option.to_int
		if option == 0 then
			exit("Program has ended.")
		else if option == 1 then
			address = null
			port = null
			while not address or not is_valid_ip(address)
				address = user_input("Enter IP Address: ")
			end while
			
			input = user_input("Do you want to enter a port (y/n)? ")
			if input == "y" or input == "Y" then
				while not port or port < 0 or port > 65535
					port = user_input("Enter Port: ")
					port = port.to_int
				end while
			end if

			if not port then
				print("Running scanner on router...")
				use_xploit(address, null, false)
			else
				print("Running scanner on " + address + " at port " + str(port))
				use_xploit(address, port, false)
			end if
		else if option == 2 then
			address = null
			
			while not address or not is_valid_ip(address)
				address = user_input("Enter IP address: ")
			end while
			
			use_xmap(address)
		else if option == 3 then
			address = null
			port = null
			
			while not address or not is_valid_ip(address)
				address = user_input("Enter IP Address: ")
			end while
			
			input = user_input("Do you want to specify a port (y/n)? ")
			if input == "y" or input == "Y" then
				while not port or port < 0 or port > 65535
					port = user_input("Enter Port: ")
					port = port.to_int
				end while
			end if
			
			if not port then
				print("Running xploits on router...")
				use_xploit(address, null, true)
			else
				print("Running xploits on " + address + " at port " + str(port))
				use_xploit(address, port, true)
			end if
		else if option == 4 then
			// Get mail files
			address = null
			port = null
			
			// Get address from user
			while not address or not is_valid_ip(address)
				address = user_input("Enter IP address: ")
			end while
			
			// Get port from user
			while not port or port < 0 or port > 65535
				port = user_input("Enter port number: ")
				port = port.to_int
			end while
			
			use_getfile(address, port, "Mail.txt")
		else if option == 5 then
			// Get bank files
			address = null
			port = null
			
			// Get address from user
			while not address or not is_valid_ip(address)
				address = user_input("Enter IP address: ")
			end while
			
			// Get port from user
			while not port or port < 0 or port > 65535
				port = user_input("Enter port number: ")
				port = port.to_int
			end while
			
			use_getfile(address, port, "Bank.txt")
		else
			print("Going back to selection.")
		end if
	end while
end while

