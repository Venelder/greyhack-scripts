// autohack.src - Auto hack and escalate priviledges multitool.
import_code("/home/5n4k3/src/helper.src")
import_code("/home/5n4k3/src/shellhelp.src")
import_code("/home/5n4k3/src/utils.src")
import_code("/home/5n4k3/src/menu.src")

if params.len == 0 then
	print("<b>Usage: " + get_name() + " [-c | -r | -i]</b>\n-c - Local exploit for computer.\n-r - Local exploit for router.\n-i - Interactive mode.")
else if params.len == 1 and params[0] == "-c" then
	print("Trying to get root shell on computer...")
	do_shell(get_shell)
else if params.len == 1 and params[0] == "-r" then
	print("Trying to get root shell on router...")
	do_shell(get_shell, true)
else if params.len == 1 and params[0] == "-i" then
	filenames = ["metaxploit.so", "crypto.so", get_name()]
	options = ["Probe", "Remote Scan", "Launch Remote", "Disable Firewall", "Cleanup"]
	exploits = []
	address = null
	port = null
	done = false
	
	while not done
		option = make_menu(options, "white")
		if option == 0 then // Exit
			done = true
		else if option == 1 then // Probe
			if address != null then
				input = user_input("Do you want another address (y/n)? ")
				if input == "y" or input == "Y" then
					address = null
				end if
			end if
			
			while (not address or address == "") and not is_valid_ip(address)
				address = user_input("Enter IP Address: ")
			end while
			
			if not is_valid_ip(address) then continue
			print("Probing " + address + "...")
			probe(address)
		else if option == 2 then // Remote Scan
			// Ask user for new address and port.
			if address != null and port != null then
				input = user_input("Do you want another address and port (y/n)? ")
				if input == "y" or input == "Y" then
					address = null
					port = null
				end if
			end if
			
			// Get address from user.
			while (not address or address == "") and not is_valid_ip(address)
				address = user_input("Remote IP: ")
			end while
			
			// Ask for another port.
			if port != null then
				input = user_input("Do you want another port (y/n)? ")
				if input == "y" or input == "Y" then
					port = null
				end if
			end if
			
			// Get port from user.
			while (not port or port == "") or (port.val < 0 or port.val > 65535)
				port = user_input("Port: ")
			end while
			
			// Get list of exploits.
			if port.val == 0 then
				exploits = exploit_router(address)
			else
				exploits = exploit_server(address, port.val)
			end if
		
			if not exploits then
				print(get_name() + ": Can't find vulnerabilities.")
				continue
			end if
		
			print(make_color("green", "Exploitable addresses found."))
		else if option == 3 then // Launch Remote Hack
			if not exploits or exploits.len == 0 then
				print("Please scan remote host first.")
				continue
			end if
			
			if not address and not port then
				print("Please scan remote host first.")
				continue
			end if
			
			// Loop through exploits to get shell.
			shell = null
			for exploit in exploits
				for value in exploit["values"]
					if not shell and value["type"] == "shell" then
						shell = value["result"]
					end if
				end for
			end for
			if not shell then
				print("Could not get shell.")
				continue
			end if
			
			// Replicate autohack to remote machine.
			replicate(shell, filenames)
			shell.launch("/home/guest/" + get_name(), "-c")
			done = true
		else if option == 4 then // Disable firewall or change password
			// Get address from user.
			input = null
			while (not input or input == "") and not is_valid_ip(input)
				input = user_input("Enter IP address: ")
			end while
			
			// Get all exploits.
			mx = get_library("metaxploit.so", true)
			if not mx then continue
			lib = use_exploit(mx, input)
			if not lib then continue
			xploits = get_exploits(lib, input, null, true)
			if not xploits then continue
			
			// Loop through exploits.
			rc = 0
			for exploit in xploits
				for memory in exploit["address"]
					for value in exploit["values"]
						if value["type"] == "number" then
							rc = lib.overflow(memory, value["value"])
							if rc == 1 then break
						end if
					end for
					if rc == 1 then break
				end for
				if rc == 1 then break
			end for
			if rc != 1 then
				print(make_color("red", "Failed to disable firewall"))
				continue
			end if
			print(make_color("green", "Success disabling firewall!"))
		else if option == 5 then // Cleanup
			input = user_input("Are you sure (y/n)? ")
			if input == "y" or input == "Y" then
				print("Cleaning up system...")
				cleanup(get_shell, filenames)
				done = true
			end if
		else
			print("That was an invalid option.")
		end if
	end while
else
	print("Invalid argument given to autohack.")
end if
exit("Program ended")
